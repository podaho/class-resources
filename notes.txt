Mac Short Cuts and Tips

cmd + c    (Copy)
cmd + v    (Paste)
cmd + x    (Cut)
cmd + z    (Undo)
cmd        (Redo)
 + shift
 + z
cmd + s    (Save)
cmd + q    (Close application)
cmd + w    (Close window)
cmd + t    (New window - doesn’t work in IntelliJ)
cmd + f    (Search for a keyword)
cmd + r    (Refresh the browser)
cmd        (Hard refresh browser, clearing cache)
 + shift
 + r

cmd + tab      (Cycle between windows)
cmd + space    (Spotlight search)
shift + arrows (Highlight text)
cmd + arrows   (Move cursor to the end of a line/beginning of a line)
opt + arrows   (Move from one word to the next)

4 fingers      (View all windows)
 + up

2 fingers      (Scroll)
 + up/down


Consider BetterSnapTool for quickly resizing windows

--------------------------------------------------------------------

Terminal Commands

-- Common Commands --

cd /      (Navigates to the root directory)
cd ~  (Navigates to the home directory)
ls     (list files in the current directory)
ls -a  (list all files including hidden files; these start with a .)
pwd    (Print working directory to see what folder you are in)
mkdir  (Create a directory)
cd     (Change directories)
cd ..  (Go to the parent directory)
touch  (Creates an empty file)
cat    (Show the contents of a file)
mv     (Move a file with mv <filename> <location and or new name>)
cp     (Copy a file with cp <file to copy> <location and or name of copy>)
rm     (Delete files)
rm -r  (Adds recursive flag and allows deletion of files and empty directories)
rm -rf (Add flag -f (force) to delete directories that are not empty)
clear  (Clears console display but still can scroll through history)

Use up and down arrows to scroll through previous commands
Use tab to autocomplete file paths

--------------------------------------------------------------------

Git From Terminal


-- Common Commands --

git init            (Initialize a repository) AVOID NESTED REPOS
git status          (See which files need to be added or have been added)
git add <filename>  (Add files to the staging area to be committed)
git diff --cached   (See the changes of the files that will be committed)
git commit          (Commit the changes to Git)
git log             (View all previous commits)
git rm --cached     (Remove files from staging by adding the file name)
git commit -m “”    (To add commit message without an editor)

To save commit message in Vim, type esc, then :wq

-- GitHub Set Up --

Assuming you have an account and a local repo with committed changes:

1) Create a repository (click plus button at the top of the GitHub nav bar)
2) Paste the commands on GitHub of the second option in your terminal to push initially up to GitHub


-- Best Practice --

Add and commit frequently any time you complete a small piece of functionality
Write descriptive commit messages
Push commits regularly (at least twice a day)

--------------------------------------------------------------------

Dev Resources
    Google - the best resource
    w3schools.com - very helpful quick reference
    Mozilla Developer Network (MDN) - deeper technical reference than w3schools
    Stackoverflow - forum for programming questions
    Codecademy - many tutorials with exercises to debug
    Lynda - free learning resource through Bibliotech Bexar County
    Treehouse.com - free learning resource through Bibliotech Bexar County

--------------------------------------------------------------------

-- Extra CSS Resources --
    DevTips YouTube channel
    CSS-Tricks blog
    https://coolors.co/f15025-ffffff-e6e8e6-ced0ce-191919
    https://www.onblastblog.com/css3-cheat-sheet/


-- Cool Examples! --

    https://codepen.io/mtorosian/full/KwyrZa
    https://codepen.io/r4ms3s/pen/gajVBG
    http://www.rleonardi.com/interactive-resume/

--------------------------------------------------------------------

================================= GIT BRANCHING

Everything we have done is on the “master branch” in Git

New best practice work flow...don’t commit in the local master branch; always add and commit in another branch!

   --> FIRST STEP
    Create a new branch in your Git local repo (suggested branch name: yourName-exerciseOrFeature)...
    Command: git checkout -b “justin-box-model”

   --> SECOND STEP
    Add and commit changes as you normally would...
    Command: git add someFile, git commit someFile, etc.

   --> THIRD STEP
    Merge local branch with the local master branch...
    Commands:
        1) git checkout master
        2) git merge whateverBranchName

       OR

   Discard work from branch and DON’T merge with the local master branch...
    Commands:
        1) git checkout master
        2) git branch -D whateverBranchName (deletes the branch and all the work you committed!)

   --> FOURTH STEP
    Push up changes from local master branch to remote repository (GitHub repo)...
    Command: git push origin master

To list all created branches...
Command: git branch


================================= GIT BRANCHING EXERCISE


Create a branch of your name:

    git checkout -b firstname-lastname


In this branch, use the following command to create a new file: 

    touch branch-test.txt


Add and commit the change:

    git add . (or git add branch-test.txt)

    git commit -m “Add branch-test.txt”


Check your list of branches:
    
    git branch


Checkout to master:

    git checkout master


Merge the changes from your branch

    git merge firstname-lastname

------------------------------------------------------------------------

NowWeKnow.md
Set Timer for 1 minute
- you can use fn delete to delete
- github repo
    git is a program that runs on terminal, GUI
    git itself is:
        - a permanent record
        - a time machine
        - doorway to parallel universes (branches)
    "repo" means a regular ol' directory/folder that is managed by git
    any time you type "git init" in a folder, you make it a git repo
    when you are inside a repo, git commands work for that folder
    github is a brand of an online service that hosts git repos remotely
    github allows us to save our code in folders (repos)
    github is a hosting service for code
- option and arrow to move to next 
- new shortcuts in intellij and mac
    command + t => open a new tab
    command + n => open a new window
    control + tab => cycle between open tabs
    command + tab => cycle between open windows
- class & id
    - useful for grouping elements together
    - add multiple classes to elements, separated with a space
    - prefer classes over using ids
    - Apply an id to element if that element is super special and there's only 1 of it
    - If we need to target some element(s) with CSS, slap a class them
- shift + alt + click to get multiple cursors
- emmett shortus
- stylesheets
- "the workflow"
    - open up your project in intelliJ
    - create or edit files
    - command + k (and write a clear commit message that explains what, why, how)
    - commit + push
- all about slack and all about intellij
- selectors
    element selector (h1 targets all h1 elements, li targets all li elements)
    .class-selector means this targets all html elements that have this class name
    #id-selector
    .multiple, .class-selector  (comma means either selector) (h1, h2, h3)
    h1.class-selector (no-spaces mean element must have both selectors)
    .parent>.directChild => direct child selector
    .space .separated => all .separated descendents of .space
    table h2 => all h2s that are descendents of table
css:
.blue {
    background-color: blue;
}
<h1 class="blue">Hi, everybody</h1>
- git terminal commands
    git init => enables a directory w/ git (should only be done once)  
    git status => shows you if files are unstaged, staged, and what branch you are in
    git add <filename> => stages a file for commit
    git add . => stages all changes for commit
    git log => shows the list of commits 
    git commit => commits staged files
    git commit -m "first commit of whatever" => commits staged files with a message
    git push origin master => uploads your git commits to github
    git checkout branchName => changes the contents of a folder to match what is commited in that branch name
    git checkout 1b13k73i21k => checks out a specific commit
    git branch => shows local branches available for checkout, currently checked out branch
    git merge anotherBranch => merges changes from anotherBranch into your current branch
    git checkout -b newbranch => makes a branch called newbranch and checks it out
    git pull origin branchName => pulls changes on branchName from remote into your local
- remove my last commit from git (accidentally committed somethin' with a password)
- VCS (resume example vs. git)
    resume.pdf
    resume1.pdf
    resumeFINAL.pdf
    resumeFORTHISnewEmployer.pdf
    
GUI vs. command line
GUI => What you see is what you get (menus), what you see is ALL you get
CLI => what commands you know is what you get, what you see is a tip of the iceberg
git
github
margin/border/padding
    padding is background, matte 
    margin is space between elements
    border goes around padding and content body
style css
    1. Add a style attribute to an HTML element (<h1 style="color:blue;">Hi</h1>)
    2. Inline Styling means putting all your CSS inside a style tag inside the head
    3. external CSS, <link rel="stylesheet" href="css/style.css">
branching => multiple timelines
when to use class or id? 
margin when you have more than one element on top/bottom
resizing elements
    total width: width + padding left + padding right + border + margin left + margin right
knowing where your file is exactly
    on terminal, know where you are at any time with `pwd`
    on terminal, type `ls -la` to see all the folders/files in that current directory
    visualize the rlationship between terminal and your folder system
intelliJ and terminal
css inheritance
    cascading style sheet
    cascading means child elements inherit from the parent
multiple ways to do a thing
    tech aint about memorizing facts
    interfaces change
    cli interfaces change
    finding what gets the job done (relying on previously memorized things, finding new ways)

------------------------------------------------------------------------------------

final workflow:
never really work in the master branch
make a new branch whenever you need to 
    - add a feature
    - fix a bug
    - add content

name the branch something having to do with the work you're adding

do your work
commit your work to that new branch

(later)
git push origin newBranch (to get your work on github)

when you want the new work from newBranch to go into your master branch 
git checkout master (or make sure you're working in master)
git merge newBranch

git vocab:
git add filename => hey git, track this file

git commit => makes a commit which is a timestamped moment in time with an identifier
    - commit can hold 1 or more files
    - commits are commited to a branch
    - we group related changes in a commit

git push (sending a copy of all the commits in the currently checked out branch to a remote)
    - push can send 1 or more commits
